{"version":3,"sources":["../src/index.ts","../src/stacktrace/parse.ts","../src/stacktrace/stringify.ts"],"sourcesContent":["import type {\n  ErrorWithDiff,\n  File,\n  ParsedStack,\n  Reporter,\n  Suite,\n  Task,\n  Test,\n  Vitest\n} from 'vitest'\nimport {\n  startGroup,\n  endGroup,\n  error,\n  type AnnotationProperties\n} from '@actions/core'\nimport { parseStacktrace } from './stacktrace/parse'\nimport { stringifyStacktrace } from './stacktrace/stringify'\n\nexport type GitHubActionsReporterOptions = {\n  /**\n   * @default true\n   */\n  trimRepositoryPrefix?: boolean\n  /**\n   * @default false\n   */\n  hideStackTrace?: boolean\n}\n\nexport default class GitHubActionsReporter implements Reporter {\n  ctx!: Vitest\n  options: Required<GitHubActionsReporterOptions>\n\n  constructor({\n    trimRepositoryPrefix = true,\n    hideStackTrace = false\n  }: GitHubActionsReporterOptions = {}) {\n    this.options = {\n      trimRepositoryPrefix,\n      hideStackTrace\n    }\n  }\n\n  onInit(ctx: Vitest) {\n    this.ctx = ctx\n  }\n\n  async onFinished(files?: File[]) {\n    if (!files) return\n\n    startGroup('Vitest Annotations')\n    this.reportFiles(files)\n    endGroup()\n  }\n\n  private reportFiles(files: File[]) {\n    for (const file of files) {\n      if (file.result?.error) {\n        this.reportSuiteError(file.filepath, file)\n      }\n      this.reportTasks(file.filepath, file.tasks)\n    }\n  }\n\n  private reportTasks(filename: string, tasks: Task[]) {\n    for (const task of tasks) {\n      if (task.type === 'suite') {\n        if (task.result?.error) {\n          this.reportSuiteError(filename, task)\n        }\n\n        this.reportTasks(filename, task.tasks)\n      } else if (task.type === 'test') {\n        this.reportTest(filename, task)\n      } else if (task.type === 'benchmark') {\n        // TODO\n      } else {\n        checkNever(task)\n      }\n    }\n  }\n\n  private reportSuiteError(filename: string, suite: Suite) {\n    const stackTrace = this.parseStacktrace(suite.result?.error?.stackStr)\n    const position = this.getPositionFromError(filename, stackTrace)\n    const message = this.createMessage(stackTrace)\n\n    error(message, {\n      ...position,\n      title: this.getErrorTitle(suite.result?.error, 'Failed Suite')\n    })\n  }\n\n  private reportTest(filename: string, test: Test) {\n    if (test.result?.state !== 'fail') return\n\n    const stackTrace = this.parseStacktrace(test.result?.error?.stackStr)\n    const position = this.getPositionFromError(filename, stackTrace)\n    const message = this.createMessage(stackTrace)\n\n    error(message, {\n      ...position,\n      title: this.getErrorTitle(test.result?.error, 'Failed Test')\n    })\n  }\n\n  private parseStacktrace(stacktraceStr: string | undefined) {\n    if (!stacktraceStr) return undefined\n    return parseStacktrace(stacktraceStr)\n  }\n\n  private createMessage(stacktrace: ParsedStack[] | undefined) {\n    if (this.options.hideStackTrace) return '.'\n\n    if (!stacktrace) return 'No stacktrace'\n    return stringifyStacktrace(stacktrace, this.options.trimRepositoryPrefix)\n  }\n\n  private getPositionFromError(\n    filename: string,\n    stacktrace?: ParsedStack[]\n  ): AnnotationProperties {\n    if (!stacktrace || !stacktrace[0]) {\n      return { file: filename }\n    }\n\n    const { file, line, column } = stacktrace[0]\n    return {\n      file: file,\n      startLine: line,\n      startColumn: column\n    }\n  }\n\n  private getErrorTitle(error: ErrorWithDiff | undefined, fallback: string) {\n    return `${error?.name ?? 'Error'}: ${error?.message ?? fallback}`\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars\nfunction checkNever(_: never) {}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n  https://github.com/vitest-dev/vitest/blob/f1cdfb6960a1eb39345f973529bc1e72ab4090b4/packages/vitest/src/utils/source-map.ts#L59-L115\n  MIT License\n  Copyright (c) 2021-Present Anthony Fu <https://github.com/antfu>\n  Copyright (c) 2021-Present Matias Capeletto <https://github.com/patak-dev>\n  https://github.com/vitest-dev/vitest/blob/main/LICENSE\n*/\n\nimport type { ParsedStack } from 'vitest'\n\nconst stackIgnorePatterns = [\n  'node:internal',\n  '/vitest/dist/',\n  '/node_modules/chai/',\n  '/node_modules/tinypool/',\n  '/node_modules/tinyspy/'\n]\n\nconst slash = (str: string) => str.replace(/\\\\/g, '/')\n\nfunction notNullish<T>(v: T | null | undefined): v is NonNullable<T> {\n  return v != null\n}\n\nfunction extractLocation(urlLike: string) {\n  // Fail-fast but return locations like \"(native)\"\n  if (!urlLike.includes(':')) return [urlLike]\n\n  const regExp = /(.+?)(?::(\\d+))?(?::(\\d+))?$/\n  const parts = regExp.exec(urlLike.replace(/[()]/g, ''))\n  if (!parts) return [urlLike]\n  return [parts[1], parts[2] || undefined, parts[3] || undefined]\n}\n\nexport const parseStacktrace = (\n  stackStr: string,\n  full = false\n): ParsedStack[] => {\n  const stackFrames = stackStr\n    .split('\\n')\n    // Based on https://github.com/stacktracejs/error-stack-parser\n    // Credit to stacktracejs\n    .map((raw): ParsedStack | null => {\n      let line = raw.trim()\n\n      if (line.includes('(eval '))\n        line = line\n          .replace(/eval code/g, 'eval')\n          .replace(/(\\(eval at [^()]*)|(,.*$)/g, '')\n\n      let sanitizedLine = line\n        .replace(/^\\s+/, '')\n        .replace(/\\(eval code/g, '(')\n        .replace(/^.*?\\s+/, '')\n\n      // capture and preserve the parenthesized location \"(/foo/my bar.js:12:87)\" in\n      // case it has spaces in it, as the string is split on \\s+ later on\n      const location = sanitizedLine.match(/ (\\(.+\\)$)/)\n\n      // remove the parenthesized location from the line, if it was matched\n      sanitizedLine = location\n        ? sanitizedLine.replace(location[0]!, '')\n        : sanitizedLine\n\n      // if a location was matched, pass it to extractLocation() otherwise pass all sanitizedLine\n      // because this line doesn't have function name\n      const [url, lineNumber, columnNumber] = extractLocation(\n        location ? location[1]! : sanitizedLine\n      )\n      let method = (location && sanitizedLine) || ''\n      let file = url && ['eval', '<anonymous>'].includes(url) ? undefined : url\n\n      if (!file || !lineNumber || !columnNumber) return null\n\n      if (method.startsWith('async ')) method = method.slice(6)\n\n      if (file.startsWith('file://')) file = file.slice(7)\n\n      if (!full && stackIgnorePatterns.some(p => file && file.includes(p)))\n        return null\n\n      return {\n        method,\n        file: slash(file),\n        line: parseInt(lineNumber),\n        column: parseInt(columnNumber)\n      }\n    })\n    .filter(notNullish)\n\n  return stackFrames\n}\n","import type { ParsedStack } from 'vitest'\n\nconst repository = process.env.GITHUB_REPOSITORY?.split('/')[1] ?? ''\nconst repositoryPrefixes = [\n  `D:/a/${repository}/`,\n  `/home/runner/work/${repository}/`\n]\n\nexport const stringifyStacktrace = (\n  stack: ParsedStack[],\n  trimRepositoryPrefix: boolean\n) => {\n  return stack\n    .map(s => {\n      let file = s.file\n      if (trimRepositoryPrefix) {\n        file = trimPrefixes(file, repositoryPrefixes)\n      }\n\n      return `  at ${s.method ? `${s.method} ` : ''}${file}:${s.line}:${\n        s.column\n      }`\n    })\n    .join('\\n')\n}\n\nconst trimPrefixes = (str: string, prefixes: string[]) => {\n  for (const p of prefixes) {\n    if (str.startsWith(p)) {\n      str = str.slice(p.length)\n      break\n    }\n  }\n  return str\n}\n"],"mappings":"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","names":["_a","error"]}