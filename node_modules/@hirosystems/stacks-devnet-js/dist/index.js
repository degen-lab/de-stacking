"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DevnetNetworkOrchestrator = exports.getIsolatedNetworkConfigUsingNetworkId = exports.DevnetNetworkFactory = void 0;
var _a = require("../native/index.node"), stacksDevnetNew = _a.stacksDevnetNew, stacksDevnetStart = _a.stacksDevnetStart, stacksDevnetTerminate = _a.stacksDevnetTerminate, stacksDevnetWaitForStacksBlock = _a.stacksDevnetWaitForStacksBlock, stacksDevnetWaitForBitcoinBlock = _a.stacksDevnetWaitForBitcoinBlock, stacksDevnetGetStacksNodeUrl = _a.stacksDevnetGetStacksNodeUrl, stacksDevnetGetBitcoinNodeUrl = _a.stacksDevnetGetBitcoinNodeUrl, stacksDevnetGetStacksApiUrl = _a.stacksDevnetGetStacksApiUrl, stacksDevnetGetStacksExplorerUrl = _a.stacksDevnetGetStacksExplorerUrl, stacksDevnetGetBitcoinExplorerUrl = _a.stacksDevnetGetBitcoinExplorerUrl;
__exportStar(require("@hirosystems/chainhook-types"), exports);
var DevnetNetworkFactory = /** @class */ (function () {
    function DevnetNetworkFactory() {
        this.nextNetworkId = 0;
    }
    DevnetNetworkFactory.sharedInstance = function () {
        if (!DevnetNetworkFactory.instance) {
            DevnetNetworkFactory.instance = new DevnetNetworkFactory();
        }
        return DevnetNetworkFactory.instance;
    };
    DevnetNetworkFactory.prototype.buildNetwork = function (manifest) {
        var network = new DevnetNetworkOrchestrator(getIsolatedNetworkConfigUsingNetworkId(this.nextNetworkId, manifest));
        this.nextNetworkId += 1;
        return network;
    };
    DevnetNetworkFactory.instance = undefined;
    return DevnetNetworkFactory;
}());
exports.DevnetNetworkFactory = DevnetNetworkFactory;
function getIsolatedNetworkConfigUsingNetworkId(networkId, networkConfig, interval) {
    if (interval === void 0) { interval = 10000; }
    var manifestPath = networkConfig.clarinetManifestPath || "./Clarinet.toml";
    var logs = networkConfig.logs || false;
    var accounts = networkConfig.accounts || [];
    // Devnet settings
    var devnetDefaults = {
        network_id: networkId,
        bitcoin_controller_automining_disabled: false,
        bitcoin_node_p2p_port: interval + networkId * 20 + 1,
        bitcoin_node_rpc_port: interval + networkId * 20 + 2,
        stacks_node_p2p_port: interval + networkId * 20 + 3,
        stacks_node_rpc_port: interval + networkId * 20 + 4,
        orchestrator_port: interval + networkId * 20 + 5,
        orchestrator_control_port: interval + networkId * 20 + 6,
        stacks_api_port: interval + networkId * 20 + 7,
        stacks_api_events_port: interval + networkId * 20 + 8,
        postgres_port: interval + networkId * 20 + 9,
        stacks_explorer_port: interval + networkId * 20 + 10,
        bitcoin_explorer_port: interval + networkId * 20 + 11,
        subnet_node_p2p_port: interval + networkId * 20 + 12,
        subnet_node_rpc_port: interval + networkId * 20 + 13,
        subnet_api_port: interval + networkId * 20 + 14,
        subnet_api_events_port: interval + networkId * 20 + 15,
    };
    var devnet = Object.assign(devnetDefaults, networkConfig.devnet);
    return {
        clarinetManifestPath: manifestPath,
        logs: logs,
        accounts: accounts,
        devnet: devnet,
    };
}
exports.getIsolatedNetworkConfigUsingNetworkId = getIsolatedNetworkConfigUsingNetworkId;
var DevnetNetworkOrchestrator = /** @class */ (function () {
    /**
     * @summary Construct a new DevnetNetworkOrchestrator
     * @param {NetworkConfig} manifest
     * @memberof DevnetNetworkOrchestrator
     */
    function DevnetNetworkOrchestrator(config, defaultCooldown) {
        if (defaultCooldown === void 0) { defaultCooldown = 4000; }
        var manifestPath = config.clarinetManifestPath;
        var logs = config.logs;
        logs || (logs = false);
        var accounts = config.accounts;
        accounts || (accounts = []);
        var devnet = config.devnet;
        devnet || (devnet = {});
        this.handle = stacksDevnetNew(manifestPath, logs, accounts, devnet);
        this.lastCooldownEndedAt = new Date();
        this.defaultCooldown = defaultCooldown;
        this.currentCooldown = defaultCooldown;
    }
    /**
     * @summary Start orchestrating containers
     * @memberof DevnetNetworkOrchestrator
     */
    DevnetNetworkOrchestrator.prototype.start = function (timeout, emptyBuffer) {
        if (timeout === void 0) { timeout = 60; }
        if (emptyBuffer === void 0) { emptyBuffer = true; }
        return stacksDevnetStart.call(this.handle, timeout, emptyBuffer);
    };
    /**
     * @summary Returns the URL of the stacks-node container
     * @memberof DevnetNetworkOrchestrator
     */
    DevnetNetworkOrchestrator.prototype.getStacksNodeUrl = function () {
        return stacksDevnetGetStacksNodeUrl.call(this.handle);
    };
    /**
     * @summary Returns the URL of the bitcoin-node container
     * @memberof DevnetNetworkOrchestrator
     */
    DevnetNetworkOrchestrator.prototype.getBitcoinNodeUrl = function () {
        return stacksDevnetGetBitcoinNodeUrl.call(this.handle);
    };
    /**
     * @summary Returns the URL of the stacks-api container
     * @memberof DevnetNetworkOrchestrator
     */
    DevnetNetworkOrchestrator.prototype.getStacksApiUrl = function () {
        return stacksDevnetGetStacksApiUrl.call(this.handle);
    };
    /**
     * @summary Returns the URL of the stacks-explorer container
     * @memberof DevnetNetworkOrchestrator
     */
    DevnetNetworkOrchestrator.prototype.getStacksExplorerUrl = function () {
        return stacksDevnetGetStacksExplorerUrl.call(this.handle);
    };
    /**
     * @summary Returns the URL of the bitcoin-explorer container
     * @memberof DevnetNetworkOrchestrator
     */
    DevnetNetworkOrchestrator.prototype.getBitcoinExplorerUrl = function () {
        return stacksDevnetGetBitcoinExplorerUrl.call(this.handle);
    };
    /**
     * @summary Wait for the next Stacks block
     * @memberof DevnetNetworkOrchestrator
     */
    DevnetNetworkOrchestrator.prototype.waitForNextStacksBlock = function (maxErrors, emptyQueuedBlocks) {
        if (maxErrors === void 0) { maxErrors = 5; }
        if (emptyQueuedBlocks === void 0) { emptyQueuedBlocks = false; }
        return __awaiter(this, void 0, void 0, function () {
            var errorCount, chainUpdate, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        errorCount = 0;
                        _a.label = 1;
                    case 1:
                        if (!true) return [3 /*break*/, 6];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, this.mineBitcoinBlockAndHopeForStacksBlock(emptyQueuedBlocks)];
                    case 3:
                        chainUpdate = _a.sent();
                        if (chainUpdate == undefined) {
                            this.currentCooldown += this.defaultCooldown;
                            errorCount += 1;
                            if (errorCount >= maxErrors) {
                                throw 'waitForNextStacksBlock maxErrors reached';
                            }
                            return [3 /*break*/, 1];
                        }
                        this.currentCooldown = this.defaultCooldown;
                        return [2 /*return*/, chainUpdate];
                    case 4:
                        error_1 = _a.sent();
                        errorCount += 1;
                        if (errorCount >= maxErrors) {
                            throw error_1;
                        }
                        return [3 /*break*/, 5];
                    case 5: return [3 /*break*/, 1];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @summary Wait for the next Stacks block
     * @memberof DevnetNetworkOrchestrator
     */
    DevnetNetworkOrchestrator.prototype.mineBitcoinBlockAndHopeForStacksBlock = function (emptyQueuedBlocks) {
        if (emptyQueuedBlocks === void 0) { emptyQueuedBlocks = false; }
        return __awaiter(this, void 0, void 0, function () {
            var now, ms_elapsed, cooldown, wait;
            var _this = this;
            return __generator(this, function (_a) {
                now = new Date();
                ms_elapsed = (now.getTime() - this.lastCooldownEndedAt.getTime());
                cooldown = Math.max(0, this.currentCooldown - ms_elapsed);
                wait = function (ms) { return new Promise(function (resolve) { return setTimeout(resolve, ms); }); };
                return [2 /*return*/, wait(cooldown)
                        .then(function () {
                        _this.lastCooldownEndedAt = new Date();
                        return stacksDevnetWaitForStacksBlock.call(_this.handle, _this.currentCooldown, emptyQueuedBlocks);
                    })
                        .catch(function (e) {
                        _this.lastCooldownEndedAt = new Date();
                        throw e;
                    })];
            });
        });
    };
    /**
     * @summary Wait for the next Stacks block
     * @memberof DevnetNetworkOrchestrator
     */
    DevnetNetworkOrchestrator.prototype.waitForStacksBlockOfHeight = function (targetBlockHeight, maxErrors, emptyQueuedBlocks) {
        if (maxErrors === void 0) { maxErrors = 5; }
        if (emptyQueuedBlocks === void 0) { emptyQueuedBlocks = false; }
        return __awaiter(this, void 0, void 0, function () {
            var chainUpdate, currentBlockHeight, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!true) return [3 /*break*/, 5];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.waitForNextStacksBlock(maxErrors, emptyQueuedBlocks)];
                    case 2:
                        chainUpdate = _a.sent();
                        currentBlockHeight = chainUpdate.new_blocks[0].block.block_identifier.index;
                        if (currentBlockHeight >= targetBlockHeight) {
                            return [2 /*return*/, chainUpdate];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        error_2 = _a.sent();
                        throw error_2;
                    case 4: return [3 /*break*/, 0];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @summary Wait for the next Stacks block
     * @memberof DevnetNetworkOrchestrator
     */
    DevnetNetworkOrchestrator.prototype.waitForStacksBlockAnchoredOnBitcoinBlockOfHeight = function (minBitcoinBlockHeight, maxErrors, emptyQueuedBlocks) {
        if (maxErrors === void 0) { maxErrors = 5; }
        if (emptyQueuedBlocks === void 0) { emptyQueuedBlocks = false; }
        return __awaiter(this, void 0, void 0, function () {
            var chainUpdate, metadata, currentBitcoinBlockHeight, error_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!true) return [3 /*break*/, 5];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.waitForNextStacksBlock(maxErrors, emptyQueuedBlocks)];
                    case 2:
                        chainUpdate = _a.sent();
                        metadata = chainUpdate.new_blocks[0].block.metadata;
                        currentBitcoinBlockHeight = metadata.bitcoin_anchor_block_identifier.index;
                        if (currentBitcoinBlockHeight >= minBitcoinBlockHeight) {
                            return [2 /*return*/, chainUpdate];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        error_3 = _a.sent();
                        throw error_3;
                    case 4: return [3 /*break*/, 0];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @summary Wait for the next Bitcoin block
     * @memberof DevnetNetworkOrchestrator
     */
    DevnetNetworkOrchestrator.prototype.waitForNextBitcoinBlock = function () {
        return __awaiter(this, void 0, void 0, function () {
            var now, ms_elapsed, cooldown, wait;
            var _this = this;
            return __generator(this, function (_a) {
                now = new Date();
                ms_elapsed = (now.getTime() - this.lastCooldownEndedAt.getTime());
                cooldown = Math.max(0, this.currentCooldown - ms_elapsed);
                wait = function (ms) { return new Promise(function (resolve) { return setTimeout(resolve, ms); }); };
                return [2 /*return*/, wait(cooldown)
                        .then(function () {
                        _this.lastCooldownEndedAt = new Date();
                        return stacksDevnetWaitForBitcoinBlock.call(_this.handle);
                    })
                        .catch(function (e) {
                        _this.lastCooldownEndedAt = new Date();
                        throw e;
                    })];
            });
        });
    };
    /**
     * @summary Wait for the next Bitcoin block
     * @memberof DevnetNetworkOrchestrator
     */
    DevnetNetworkOrchestrator.prototype.waitForStacksBlockIncludingTransaction = function (txid, ttl) {
        if (ttl === void 0) { ttl = 5; }
        return __awaiter(this, void 0, void 0, function () {
            var chainUpdate, _i, _a, transaction;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(ttl > 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.waitForNextStacksBlock()];
                    case 1:
                        chainUpdate = _b.sent();
                        for (_i = 0, _a = chainUpdate.new_blocks[0].block.transactions; _i < _a.length; _i++) {
                            transaction = _a[_i];
                            if (transaction.transaction_identifier.hash.endsWith(txid)) {
                                return [2 /*return*/, {
                                        chainUpdate: chainUpdate,
                                        transaction: transaction,
                                    }];
                            }
                        }
                        ttl -= 1;
                        return [3 /*break*/, 0];
                    case 2: throw 'waitForStacksBlockIncludingTransaction TTL expired';
                }
            });
        });
    };
    ;
    /**
     * @summary Terminates the containers
     * @memberof DevnetNetworkOrchestrator
     */
    DevnetNetworkOrchestrator.prototype.terminate = function () {
        return stacksDevnetTerminate.call(this.handle);
    };
    return DevnetNetworkOrchestrator;
}());
exports.DevnetNetworkOrchestrator = DevnetNetworkOrchestrator;
//# sourceMappingURL=index.js.map